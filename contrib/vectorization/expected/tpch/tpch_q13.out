set extra_float_digits = -1;;
set default_table_access_method=ao_column;
set vector.enable_vectorization = on;
ANALYZE;
explain (costs off) select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%unusual%deposits%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Vec Gather Motion 3:1  (slice1; segments: 3)
   Merge Key: (count()), (count(orders.o_orderkey))
   ->  Vec Sort
         Sort Key: (count()) DESC, (count(orders.o_orderkey)) DESC
         ->  Vec HashAggregate
               Group Key: (count(orders.o_orderkey))
               ->  Vec Redistribute Motion 3:3  (slice2; segments: 3)
                     Hash Key: (count(orders.o_orderkey))
                     ->  Vec HashAggregate
                           Group Key: customer.c_custkey
                           ->  Vec Hash Right Join
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Vec Redistribute Motion 3:3  (slice3; segments: 3)
                                       Hash Key: orders.o_custkey
                                       ->  Vec Seq Scan on orders
                                             Filter: ((o_comment)::text !~~ '%unusual%deposits%'::text)
                                 ->  Vec Hash
                                       ->  Vec Seq Scan on customer
 Optimizer: Pivotal Optimizer (GPORCA)
(19 rows)

select
	c_count,
	count(*) as custdist
from
	(
		select
			c_custkey,
			count(o_orderkey)
		from
			customer left outer join orders on
				c_custkey = o_custkey
				and o_comment not like '%unusual%deposits%'
		group by
			c_custkey
	) as c_orders (c_custkey, c_count)
group by
	c_count
order by
	custdist desc,
	c_count desc;
 c_count | custdist 
---------+----------
       0 |      500
      11 |       70
       9 |       66
      12 |       65
       8 |       63
      10 |       61
      14 |       51
      13 |       51
      21 |       48
      20 |       48
      15 |       48
      18 |       44
      17 |       44
       7 |       44
      16 |       40
      22 |       36
      24 |       34
      19 |       34
       6 |       33
      23 |       26
      25 |       21
       5 |       15
      26 |       14
      27 |       12
      29 |        7
      28 |        6
       4 |        6
      32 |        4
      30 |        3
      31 |        2
       3 |        2
       2 |        2
(32 rows)

