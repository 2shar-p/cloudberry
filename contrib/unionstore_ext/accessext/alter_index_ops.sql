ALTER OPERATOR FAMILY float_ops USING ushash ADD
OPERATOR 1 =(float8,float4),
OPERATOR 1 =(float4,float8);
ALTER OPERATOR FAMILY quad_point_ops USING usspgist ADD
OPERATOR 8 <@(point,box);
ALTER OPERATOR FAMILY tsvector_ops USING usgist ADD
OPERATOR 1 @@(tsvector,tsquery);
ALTER OPERATOR FAMILY float_ops USING usbtree ADD
OPERATOR 1 <(float4,float8),
OPERATOR 2 <=(float4,float8),
OPERATOR 3 =(float4,float8),
OPERATOR 4 >=(float4,float8),
OPERATOR 5 >(float4,float8),
FUNCTION 1(float4,float8) btfloat48cmp(float4,float8),
FUNCTION 3(float4,float8) in_range(float4,float4,float8,bool,bool),
OPERATOR 1 <(float8,float4),
OPERATOR 2 <=(float8,float4),
OPERATOR 3 =(float8,float4),
OPERATOR 4 >=(float8,float4),
OPERATOR 5 >(float8,float4),
FUNCTION 1(float8,float4) btfloat84cmp(float8,float4);
ALTER OPERATOR FAMILY float_ops USING usbitmap ADD
OPERATOR 1 <(float4,float8),
OPERATOR 2 <=(float4,float8),
OPERATOR 3 =(float4,float8),
OPERATOR 4 >=(float4,float8),
OPERATOR 5 >(float4,float8),
FUNCTION 1(float4,float8) btfloat48cmp(float4,float8),
FUNCTION 3(float4,float8) in_range(float4,float4,float8,bool,bool),
OPERATOR 1 <(float8,float4),
OPERATOR 2 <=(float8,float4),
OPERATOR 3 =(float8,float4),
OPERATOR 4 >=(float8,float4),
OPERATOR 5 >(float8,float4),
FUNCTION 1(float8,float4) btfloat84cmp(float8,float4);
ALTER OPERATOR FAMILY box_inclusion_ops USING usbrin ADD
OPERATOR 7 @>(box,point);
ALTER OPERATOR FAMILY jsonb_ops USING usgin ADD
OPERATOR 9 ?(jsonb,text),
OPERATOR 10 ?|(jsonb,_text),
OPERATOR 11 ?&(jsonb,_text),
OPERATOR 15 @?(jsonb,jsonpath),
OPERATOR 16 @@(jsonb,jsonpath);
ALTER OPERATOR FAMILY float_minmax_multi_ops USING usbrin ADD
OPERATOR 1 <(float8,float4),
OPERATOR 2 <=(float8,float4),
OPERATOR 3 =(float8,float4),
OPERATOR 4 >=(float8,float4),
OPERATOR 5 >(float8,float4),
OPERATOR 1 <(float4,float8),
OPERATOR 2 <=(float4,float8),
OPERATOR 3 =(float4,float8),
OPERATOR 4 >=(float4,float8),
OPERATOR 5 >(float4,float8);
ALTER OPERATOR FAMILY time_ops USING usbtree ADD
FUNCTION 3(time,interval) in_range(time,time,interval,bool,bool);
ALTER OPERATOR FAMILY time_ops USING usbitmap ADD
FUNCTION 3(time,interval) in_range(time,time,interval,bool,bool);
ALTER OPERATOR FAMILY point_ops USING usgist ADD
OPERATOR 28 <@(point,box),
OPERATOR 48 <@(point,polygon),
OPERATOR 68 <@(point,circle);
ALTER OPERATOR FAMILY datetime_ops USING usbtree ADD
OPERATOR 1 <(timestamp,date),
OPERATOR 2 <=(timestamp,date),
OPERATOR 3 =(timestamp,date),
OPERATOR 4 >=(timestamp,date),
OPERATOR 5 >(timestamp,date),
OPERATOR 1 <(timestamp,timestamptz),
OPERATOR 2 <=(timestamp,timestamptz),
OPERATOR 3 =(timestamp,timestamptz),
OPERATOR 4 >=(timestamp,timestamptz),
OPERATOR 5 >(timestamp,timestamptz),
FUNCTION 1(timestamp,date) timestamp_cmp_date(timestamp,date),
FUNCTION 1(timestamp,timestamptz) timestamp_cmp_timestamptz(timestamp,timestamptz),
FUNCTION 3(timestamp,interval) in_range(timestamp,timestamp,interval,bool,bool),
OPERATOR 1 <(date,timestamp),
OPERATOR 2 <=(date,timestamp),
OPERATOR 3 =(date,timestamp),
OPERATOR 4 >=(date,timestamp),
OPERATOR 5 >(date,timestamp),
OPERATOR 1 <(date,timestamptz),
OPERATOR 2 <=(date,timestamptz),
OPERATOR 3 =(date,timestamptz),
OPERATOR 4 >=(date,timestamptz),
OPERATOR 5 >(date,timestamptz),
FUNCTION 1(date,timestamp) date_cmp_timestamp(date,timestamp),
FUNCTION 1(date,timestamptz) date_cmp_timestamptz(date,timestamptz),
FUNCTION 3(date,interval) in_range(date,date,interval,bool,bool),
OPERATOR 1 <(timestamptz,date),
OPERATOR 2 <=(timestamptz,date),
OPERATOR 3 =(timestamptz,date),
OPERATOR 4 >=(timestamptz,date),
OPERATOR 5 >(timestamptz,date),
OPERATOR 1 <(timestamptz,timestamp),
OPERATOR 2 <=(timestamptz,timestamp),
OPERATOR 3 =(timestamptz,timestamp),
OPERATOR 4 >=(timestamptz,timestamp),
OPERATOR 5 >(timestamptz,timestamp),
FUNCTION 1(timestamptz,date) timestamptz_cmp_date(timestamptz,date),
FUNCTION 1(timestamptz,timestamp) timestamptz_cmp_timestamp(timestamptz,timestamp),
FUNCTION 3(timestamptz,interval) in_range(timestamptz,timestamptz,interval,bool,bool);
ALTER OPERATOR FAMILY datetime_ops USING usbitmap ADD
OPERATOR 1 <(timestamp,date),
OPERATOR 2 <=(timestamp,date),
OPERATOR 3 =(timestamp,date),
OPERATOR 4 >=(timestamp,date),
OPERATOR 5 >(timestamp,date),
OPERATOR 1 <(timestamp,timestamptz),
OPERATOR 2 <=(timestamp,timestamptz),
OPERATOR 3 =(timestamp,timestamptz),
OPERATOR 4 >=(timestamp,timestamptz),
OPERATOR 5 >(timestamp,timestamptz),
FUNCTION 1(timestamp,date) timestamp_cmp_date(timestamp,date),
FUNCTION 1(timestamp,timestamptz) timestamp_cmp_timestamptz(timestamp,timestamptz),
FUNCTION 3(timestamp,interval) in_range(timestamp,timestamp,interval,bool,bool),
OPERATOR 1 <(date,timestamp),
OPERATOR 2 <=(date,timestamp),
OPERATOR 3 =(date,timestamp),
OPERATOR 4 >=(date,timestamp),
OPERATOR 5 >(date,timestamp),
OPERATOR 1 <(date,timestamptz),
OPERATOR 2 <=(date,timestamptz),
OPERATOR 3 =(date,timestamptz),
OPERATOR 4 >=(date,timestamptz),
OPERATOR 5 >(date,timestamptz),
FUNCTION 1(date,timestamp) date_cmp_timestamp(date,timestamp),
FUNCTION 1(date,timestamptz) date_cmp_timestamptz(date,timestamptz),
FUNCTION 3(date,interval) in_range(date,date,interval,bool,bool),
OPERATOR 1 <(timestamptz,date),
OPERATOR 2 <=(timestamptz,date),
OPERATOR 3 =(timestamptz,date),
OPERATOR 4 >=(timestamptz,date),
OPERATOR 5 >(timestamptz,date),
OPERATOR 1 <(timestamptz,timestamp),
OPERATOR 2 <=(timestamptz,timestamp),
OPERATOR 3 =(timestamptz,timestamp),
OPERATOR 4 >=(timestamptz,timestamp),
OPERATOR 5 >(timestamptz,timestamp),
FUNCTION 1(timestamptz,date) timestamptz_cmp_date(timestamptz,date),
FUNCTION 1(timestamptz,timestamp) timestamptz_cmp_timestamp(timestamptz,timestamp),
FUNCTION 3(timestamptz,interval) in_range(timestamptz,timestamptz,interval,bool,bool);
ALTER OPERATOR FAMILY circle_ops USING usgist ADD
OPERATOR 15 <->(circle,point) FOR ORDER BY float_ops;
ALTER OPERATOR FAMILY box_ops USING usgist ADD
OPERATOR 15 <->(box,point) FOR ORDER BY float_ops;
ALTER OPERATOR FAMILY poly_ops USING usspgist ADD
OPERATOR 15 <->(polygon,point) FOR ORDER BY float_ops;
ALTER OPERATOR FAMILY multirange_ops USING usgist ADD
OPERATOR 1 <<(anymultirange,anyrange),
OPERATOR 2 &<(anymultirange,anyrange),
OPERATOR 3 &&(anymultirange,anyrange),
OPERATOR 4 &>(anymultirange,anyrange),
OPERATOR 5 >>(anymultirange,anyrange),
OPERATOR 6 -|-(anymultirange,anyrange),
OPERATOR 7 @>(anymultirange,anyrange),
OPERATOR 8 <@(anymultirange,anyrange),
OPERATOR 16 @>(anymultirange,anyelement);
ALTER OPERATOR FAMILY text_ops USING usbtree ADD
OPERATOR 1 <(text,name),
OPERATOR 2 <=(text,name),
OPERATOR 3 =(text,name),
OPERATOR 4 >=(text,name),
OPERATOR 5 >(text,name),
FUNCTION 1(text,name) bttextnamecmp(text,name),
OPERATOR 1 <(name,text),
OPERATOR 2 <=(name,text),
OPERATOR 3 =(name,text),
OPERATOR 4 >=(name,text),
OPERATOR 5 >(name,text),
FUNCTION 1(name,text) btnametextcmp(name,text);
ALTER OPERATOR FAMILY text_ops USING usbitmap ADD
OPERATOR 1 <(text,name),
OPERATOR 2 <=(text,name),
OPERATOR 3 =(text,name),
OPERATOR 4 >=(text,name),
OPERATOR 5 >(text,name),
FUNCTION 1(text,name) bttextnamecmp(text,name),
OPERATOR 1 <(name,text),
OPERATOR 2 <=(name,text),
OPERATOR 3 =(name,text),
OPERATOR 4 >=(name,text),
OPERATOR 5 >(name,text),
FUNCTION 1(name,text) btnametextcmp(name,text);
ALTER OPERATOR FAMILY kd_point_ops USING usspgist ADD
OPERATOR 8 <@(point,box);
ALTER OPERATOR FAMILY cdbhash_integer_ops USING ushash ADD
OPERATOR 1 =(int4,int2),
OPERATOR 1 =(int4,int8),
OPERATOR 1 =(int8,int2),
OPERATOR 1 =(int8,int4),
OPERATOR 1 =(int2,int4),
OPERATOR 1 =(int2,int8);
ALTER OPERATOR FAMILY jsonb_path_ops USING usgin ADD
OPERATOR 15 @?(jsonb,jsonpath),
OPERATOR 16 @@(jsonb,jsonpath);
ALTER OPERATOR FAMILY poly_ops USING usgist ADD
OPERATOR 15 <->(polygon,point) FOR ORDER BY float_ops;
ALTER OPERATOR FAMILY float_minmax_ops USING usbrin ADD
OPERATOR 1 <(float8,float4),
OPERATOR 2 <=(float8,float4),
OPERATOR 3 =(float8,float4),
OPERATOR 4 >=(float8,float4),
OPERATOR 5 >(float8,float4),
OPERATOR 1 <(float4,float8),
OPERATOR 2 <=(float4,float8),
OPERATOR 3 =(float4,float8),
OPERATOR 4 >=(float4,float8),
OPERATOR 5 >(float4,float8);
ALTER OPERATOR FAMILY integer_minmax_ops USING usbrin ADD
OPERATOR 1 <(int8,int2),
OPERATOR 2 <=(int8,int2),
OPERATOR 3 =(int8,int2),
OPERATOR 4 >=(int8,int2),
OPERATOR 5 >(int8,int2),
OPERATOR 1 <(int8,int4),
OPERATOR 2 <=(int8,int4),
OPERATOR 3 =(int8,int4),
OPERATOR 4 >=(int8,int4),
OPERATOR 5 >(int8,int4),
OPERATOR 1 <(int4,int2),
OPERATOR 2 <=(int4,int2),
OPERATOR 3 =(int4,int2),
OPERATOR 4 >=(int4,int2),
OPERATOR 5 >(int4,int2),
OPERATOR 1 <(int4,int8),
OPERATOR 2 <=(int4,int8),
OPERATOR 3 =(int4,int8),
OPERATOR 4 >=(int4,int8),
OPERATOR 5 >(int4,int8),
OPERATOR 1 <(int2,int8),
OPERATOR 2 <=(int2,int8),
OPERATOR 3 =(int2,int8),
OPERATOR 4 >=(int2,int8),
OPERATOR 5 >(int2,int8),
OPERATOR 1 <(int2,int4),
OPERATOR 2 <=(int2,int4),
OPERATOR 3 =(int2,int4),
OPERATOR 4 >=(int2,int4),
OPERATOR 5 >(int2,int4);
ALTER OPERATOR FAMILY text_ops USING ushash ADD
OPERATOR 1 =(text,name),
OPERATOR 1 =(name,text);
ALTER OPERATOR FAMILY datetime_minmax_ops USING usbrin ADD
OPERATOR 1 <(timestamp,date),
OPERATOR 2 <=(timestamp,date),
OPERATOR 3 =(timestamp,date),
OPERATOR 4 >=(timestamp,date),
OPERATOR 5 >(timestamp,date),
OPERATOR 1 <(timestamp,timestamptz),
OPERATOR 2 <=(timestamp,timestamptz),
OPERATOR 3 =(timestamp,timestamptz),
OPERATOR 4 >=(timestamp,timestamptz),
OPERATOR 5 >(timestamp,timestamptz),
OPERATOR 1 <(timestamptz,date),
OPERATOR 2 <=(timestamptz,date),
OPERATOR 3 =(timestamptz,date),
OPERATOR 4 >=(timestamptz,date),
OPERATOR 5 >(timestamptz,date),
OPERATOR 1 <(timestamptz,timestamp),
OPERATOR 2 <=(timestamptz,timestamp),
OPERATOR 3 =(timestamptz,timestamp),
OPERATOR 4 >=(timestamptz,timestamp),
OPERATOR 5 >(timestamptz,timestamp),
OPERATOR 1 <(date,timestamp),
OPERATOR 2 <=(date,timestamp),
OPERATOR 3 =(date,timestamp),
OPERATOR 4 >=(date,timestamp),
OPERATOR 5 >(date,timestamp),
OPERATOR 1 <(date,timestamptz),
OPERATOR 2 <=(date,timestamptz),
OPERATOR 3 =(date,timestamptz),
OPERATOR 4 >=(date,timestamptz),
OPERATOR 5 >(date,timestamptz);
ALTER OPERATOR FAMILY datetime_minmax_multi_ops USING usbrin ADD
OPERATOR 1 <(timestamptz,date),
OPERATOR 2 <=(timestamptz,date),
OPERATOR 3 =(timestamptz,date),
OPERATOR 4 >=(timestamptz,date),
OPERATOR 5 >(timestamptz,date),
OPERATOR 1 <(timestamptz,timestamp),
OPERATOR 2 <=(timestamptz,timestamp),
OPERATOR 3 =(timestamptz,timestamp),
OPERATOR 4 >=(timestamptz,timestamp),
OPERATOR 5 >(timestamptz,timestamp),
OPERATOR 1 <(date,timestamp),
OPERATOR 2 <=(date,timestamp),
OPERATOR 3 =(date,timestamp),
OPERATOR 4 >=(date,timestamp),
OPERATOR 5 >(date,timestamp),
OPERATOR 1 <(date,timestamptz),
OPERATOR 2 <=(date,timestamptz),
OPERATOR 3 =(date,timestamptz),
OPERATOR 4 >=(date,timestamptz),
OPERATOR 5 >(date,timestamptz),
OPERATOR 1 <(timestamp,date),
OPERATOR 2 <=(timestamp,date),
OPERATOR 3 =(timestamp,date),
OPERATOR 4 >=(timestamp,date),
OPERATOR 5 >(timestamp,date),
OPERATOR 1 <(timestamp,timestamptz),
OPERATOR 2 <=(timestamp,timestamptz),
OPERATOR 3 =(timestamp,timestamptz),
OPERATOR 4 >=(timestamp,timestamptz),
OPERATOR 5 >(timestamp,timestamptz);
ALTER OPERATOR FAMILY integer_ops USING usbtree ADD
OPERATOR 1 <(int8,int2),
OPERATOR 2 <=(int8,int2),
OPERATOR 3 =(int8,int2),
OPERATOR 4 >=(int8,int2),
OPERATOR 5 >(int8,int2),
OPERATOR 1 <(int8,int4),
OPERATOR 2 <=(int8,int4),
OPERATOR 3 =(int8,int4),
OPERATOR 4 >=(int8,int4),
OPERATOR 5 >(int8,int4),
FUNCTION 1(int8,int4) btint84cmp(int8,int4),
FUNCTION 1(int8,int2) btint82cmp(int8,int2),
OPERATOR 1 <(int2,int4),
OPERATOR 2 <=(int2,int4),
OPERATOR 3 =(int2,int4),
OPERATOR 4 >=(int2,int4),
OPERATOR 5 >(int2,int4),
OPERATOR 1 <(int2,int8),
OPERATOR 2 <=(int2,int8),
OPERATOR 3 =(int2,int8),
OPERATOR 4 >=(int2,int8),
OPERATOR 5 >(int2,int8),
FUNCTION 1(int2,int4) btint24cmp(int2,int4),
FUNCTION 1(int2,int8) btint28cmp(int2,int8),
FUNCTION 3(int2,int8) in_range(int2,int2,int8,bool,bool),
FUNCTION 3(int2,int4) in_range(int2,int2,int4,bool,bool),
OPERATOR 1 <(int4,int2),
OPERATOR 2 <=(int4,int2),
OPERATOR 3 =(int4,int2),
OPERATOR 4 >=(int4,int2),
OPERATOR 5 >(int4,int2),
OPERATOR 1 <(int4,int8),
OPERATOR 2 <=(int4,int8),
OPERATOR 3 =(int4,int8),
OPERATOR 4 >=(int4,int8),
OPERATOR 5 >(int4,int8),
FUNCTION 1(int4,int8) btint48cmp(int4,int8),
FUNCTION 1(int4,int2) btint42cmp(int4,int2),
FUNCTION 3(int4,int8) in_range(int4,int4,int8,bool,bool),
FUNCTION 3(int4,int2) in_range(int4,int4,int2,bool,bool);
ALTER OPERATOR FAMILY integer_ops USING usbitmap ADD
OPERATOR 1 <(int8,int2),
OPERATOR 2 <=(int8,int2),
OPERATOR 3 =(int8,int2),
OPERATOR 4 >=(int8,int2),
OPERATOR 5 >(int8,int2),
OPERATOR 1 <(int8,int4),
OPERATOR 2 <=(int8,int4),
OPERATOR 3 =(int8,int4),
OPERATOR 4 >=(int8,int4),
OPERATOR 5 >(int8,int4),
FUNCTION 1(int8,int4) btint84cmp(int8,int4),
FUNCTION 1(int8,int2) btint82cmp(int8,int2),
OPERATOR 1 <(int2,int4),
OPERATOR 2 <=(int2,int4),
OPERATOR 3 =(int2,int4),
OPERATOR 4 >=(int2,int4),
OPERATOR 5 >(int2,int4),
OPERATOR 1 <(int2,int8),
OPERATOR 2 <=(int2,int8),
OPERATOR 3 =(int2,int8),
OPERATOR 4 >=(int2,int8),
OPERATOR 5 >(int2,int8),
FUNCTION 1(int2,int4) btint24cmp(int2,int4),
FUNCTION 1(int2,int8) btint28cmp(int2,int8),
FUNCTION 3(int2,int8) in_range(int2,int2,int8,bool,bool),
FUNCTION 3(int2,int4) in_range(int2,int2,int4,bool,bool),
OPERATOR 1 <(int4,int2),
OPERATOR 2 <=(int4,int2),
OPERATOR 3 =(int4,int2),
OPERATOR 4 >=(int4,int2),
OPERATOR 5 >(int4,int2),
OPERATOR 1 <(int4,int8),
OPERATOR 2 <=(int4,int8),
OPERATOR 3 =(int4,int8),
OPERATOR 4 >=(int4,int8),
OPERATOR 5 >(int4,int8),
FUNCTION 1(int4,int8) btint48cmp(int4,int8),
FUNCTION 1(int4,int2) btint42cmp(int4,int2),
FUNCTION 3(int4,int8) in_range(int4,int4,int8,bool,bool),
FUNCTION 3(int4,int2) in_range(int4,int4,int2,bool,bool);
ALTER OPERATOR FAMILY integer_minmax_multi_ops USING usbrin ADD
OPERATOR 1 <(int4,int2),
OPERATOR 2 <=(int4,int2),
OPERATOR 3 =(int4,int2),
OPERATOR 4 >=(int4,int2),
OPERATOR 5 >(int4,int2),
OPERATOR 1 <(int4,int8),
OPERATOR 2 <=(int4,int8),
OPERATOR 3 =(int4,int8),
OPERATOR 4 >=(int4,int8),
OPERATOR 5 >(int4,int8),
OPERATOR 1 <(int2,int8),
OPERATOR 2 <=(int2,int8),
OPERATOR 3 =(int2,int8),
OPERATOR 4 >=(int2,int8),
OPERATOR 5 >(int2,int8),
OPERATOR 1 <(int2,int4),
OPERATOR 2 <=(int2,int4),
OPERATOR 3 =(int2,int4),
OPERATOR 4 >=(int2,int4),
OPERATOR 5 >(int2,int4),
OPERATOR 1 <(int8,int2),
OPERATOR 2 <=(int8,int2),
OPERATOR 3 =(int8,int2),
OPERATOR 4 >=(int8,int2),
OPERATOR 5 >(int8,int2),
OPERATOR 1 <(int8,int4),
OPERATOR 2 <=(int8,int4),
OPERATOR 3 =(int8,int4),
OPERATOR 4 >=(int8,int4),
OPERATOR 5 >(int8,int4);
ALTER OPERATOR FAMILY range_ops USING usgist ADD
OPERATOR 1 <<(anyrange,anymultirange),
OPERATOR 2 &<(anyrange,anymultirange),
OPERATOR 3 &&(anyrange,anymultirange),
OPERATOR 4 &>(anyrange,anymultirange),
OPERATOR 5 >>(anyrange,anymultirange),
OPERATOR 6 -|-(anyrange,anymultirange),
OPERATOR 7 @>(anyrange,anymultirange),
OPERATOR 8 <@(anyrange,anymultirange),
OPERATOR 16 @>(anyrange,anyelement);
ALTER OPERATOR FAMILY integer_ops USING ushash ADD
OPERATOR 1 =(int8,int2),
OPERATOR 1 =(int8,int4),
OPERATOR 1 =(int4,int2),
OPERATOR 1 =(int4,int8),
OPERATOR 1 =(int2,int4),
OPERATOR 1 =(int2,int8);
ALTER OPERATOR FAMILY range_inclusion_ops USING usbrin ADD
OPERATOR 16 @>(anyrange,anyelement);
ALTER OPERATOR FAMILY box_ops USING usspgist ADD
OPERATOR 15 <->(box,point) FOR ORDER BY float_ops;
ALTER OPERATOR FAMILY tsvector_ops USING usgin ADD
OPERATOR 1 @@(tsvector,tsquery),
OPERATOR 2 @@@(tsvector,tsquery);
ALTER OPERATOR FAMILY range_ops USING usspgist ADD
OPERATOR 16 @>(anyrange,anyelement);
ALTER OPERATOR FAMILY timetz_ops USING usbtree ADD
FUNCTION 3(timetz,interval) in_range(timetz,timetz,interval,bool,bool);
ALTER OPERATOR FAMILY timetz_ops USING usbitmap ADD
FUNCTION 3(timetz,interval) in_range(timetz,timetz,interval,bool,bool);
