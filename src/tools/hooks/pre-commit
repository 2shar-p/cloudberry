#!/bin/sh
#
# A hook script to verify what is about to be committed. Called by
# "git commit" with no arguments. The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.

readonly reset=$(tput sgr0)
readonly red=$(tput bold; tput setaf 1)
readonly green=$(tput bold; tput setaf 2)

exit_code=0

echo -n "Checking if new commits exits... "
if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi
echo "${green}Done"
echo "${reset}"

# The following script is copied from pre-commit.sample to avoid
# non-ASCII filenames from being added to the repository.

echo -n "Running non-ASCII filenames check..."
allownonascii=$(git config --type=bool hooks.allownonascii)
exec 1>&2
if [ "$allownonascii" != "true" ] &&
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
${red}Error: Attempt to add a non-ASCII file name.
This can cause problems if you want to work with people on other platforms.
To be portable it is advisable to rename the file.
If you know what you are doing you can disable this check using:
  git config hooks.allownonascii true
EOF
  echo "${reset}"
	exit_code=1
else
  echo "${green}Done"
fi
echo "${reset}"

# If there are whitespace errors, print the offending file names and fail.
echo -n "Running whitespace checks... "
exec git diff-index --check --cached $against --
echo "${green}Done"
echo "${reset}"

# This following hook is modified from PostgreSQL wiki, which is used
# to check the changed code by pgindent. See the original link:
# https://wiki.postgresql.org/wiki/Working_with_Git#Using_git_hooks

set -u
: ${PGAUTOINDENT:=no}

branch=$(git rev-parse --abbrev-ref HEAD)
files=$(git diff --cached --name-only --diff-filter=ACMR)

check_indent () {
  # no need to filter files - pgindent ignores everything that isn't a
  # .c or .h file
  src/tools/pgindent/pgindent --silent-diff $files && return 0
  exec 2>&1
  if [ "$PGAUTOINDENT" = yes ] ; then
    echo "Running pgindent on changed files... "
    src/tools/pgindent/pgindent $files
    echo "${red}Commit abandoned! Rerun git commit to adopt pgindent changes."
  else
    echo 'You need a pgindent run, e.g:'
    echo -n 'src/tools/pgindent/pgindent '
    echo '`git diff --name-only --diff-filter=ACMR`'
  fi
  exit_code=1
}

# nothing to do if there are no files
test -z "$files" && exit 0
check_indent

if [[ "${exit_code}" != 0 ]]; then
  echo "${red}Please update your commits again per the errors.${reset}"
fi
exit ${exit_code}
