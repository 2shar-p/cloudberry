-- Install a helper function to inject faults, using the fault injection
-- mechanism built into the server.
-- start_matchignore
-- m/ERROR:  extension "gp_inject_fault" already exists/
-- end_matchignore
CREATE EXTENSION gp_inject_fault;
begin;
-- inject fault of type sleep on all primaries
select gp_inject_fault('finish_prepared_after_record_commit_prepared',
       'sleep', '', '', '', 1, 2, 0, dbid) from gp_segment_configuration
       where role = 'p' and content > -1;
 gp_inject_fault 
-----------------
 Success:
 Success:
 Success:
(3 rows)

-- check fault status
select gp_inject_fault('finish_prepared_after_record_commit_prepared',
       'status', '', '', '', 1, 2, 0, dbid) from gp_segment_configuration
       where role = 'p' and content > -1;
                                                                                                               gp_inject_fault                                                                                                               
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Success: fault name:'finish_prepared_after_record_commit_prepared' fault type:'sleep' ddl statement:'' database name:'' table name:'' start occurrence:'1' end occurrence:'2' extra arg:'0' fault injection state:'set'  num times hit:'0' +
 
 Success: fault name:'finish_prepared_after_record_commit_prepared' fault type:'sleep' ddl statement:'' database name:'' table name:'' start occurrence:'1' end occurrence:'2' extra arg:'0' fault injection state:'set'  num times hit:'0' +
 
 Success: fault name:'finish_prepared_after_record_commit_prepared' fault type:'sleep' ddl statement:'' database name:'' table name:'' start occurrence:'1' end occurrence:'2' extra arg:'0' fault injection state:'set'  num times hit:'0' +
 
(3 rows)

-- commit transaction should trigger the fault
end;
-- fault status should indicate it's triggered
select gp_inject_fault('finish_prepared_after_record_commit_prepared',
       'status', '', '', '', 1, 2, 0, dbid) from gp_segment_configuration
       where role = 'p' and content > -1;
                                                                                                               gp_inject_fault                                                                                                               
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Success: fault name:'finish_prepared_after_record_commit_prepared' fault type:'sleep' ddl statement:'' database name:'' table name:'' start occurrence:'1' end occurrence:'2' extra arg:'0' fault injection state:'set'  num times hit:'0' +
 
 Success: fault name:'finish_prepared_after_record_commit_prepared' fault type:'sleep' ddl statement:'' database name:'' table name:'' start occurrence:'1' end occurrence:'2' extra arg:'0' fault injection state:'set'  num times hit:'0' +
 
 Success: fault name:'finish_prepared_after_record_commit_prepared' fault type:'sleep' ddl statement:'' database name:'' table name:'' start occurrence:'1' end occurrence:'2' extra arg:'0' fault injection state:'set'  num times hit:'0' +
 
(3 rows)

-- reset the fault on all primaries
select gp_inject_fault('finish_prepared_after_record_commit_prepared',
       'reset', '', '', '', 1, 2, 0, dbid) from gp_segment_configuration
       where role = 'p' and content > -1;
 gp_inject_fault 
-----------------
 Success:
 Success:
 Success:
(3 rows)

-- inject an infinite skip fault into the 'fts_probe' fault to disable FTS probing on qd
select gp_inject_fault_infinite('fts_probe',
       'skip', dbid) from gp_segment_configuration where role = 'p' and content = -1;
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

-- inject a panic faults on qe when FTS probe is already skipped
select gp_inject_fault('checkpoint',
       'panic', dbid) from gp_segment_configuration where role = 'p' and content = 0;
 gp_inject_fault 
-----------------
 Success:
(1 row)

-- reset the infinite skip fault on qd
select gp_inject_fault_infinite('fts_probe',
       'reset', dbid) from gp_segment_configuration where role = 'p' and content = -1;
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

-- reset the panic on qe
select gp_inject_fault('checkpoint',
       'reset', dbid) from gp_segment_configuration where role = 'p' and content = 0;
 gp_inject_fault 
-----------------
 Success:
(1 row)

-- inject a panic fault on qd when FTS probe is not skipped
select gp_inject_fault('checkpoint',
       'panic', dbid) from gp_segment_configuration where role = 'p' and content = -1;
WARNING:  consider disabling FTS probes while injecting a panic.
HINT:  Inject an infinite 'skip' into the 'fts_probe' fault to disable FTS probing.
 gp_inject_fault 
-----------------
 Success:
(1 row)

-- inject a panic fault on qe when FTS probe is not skipped
select gp_inject_fault('checkpoint',
       'panic', dbid) from gp_segment_configuration where role = 'p' and content = 0;
WARNING:  consider disabling FTS probes while injecting a panic.  (seg0 10.0.2.15:7002 pid=225536)
HINT:  Inject an infinite 'skip' into the 'fts_probe' fault to disable FTS probing.
 gp_inject_fault 
-----------------
 Success:
(1 row)

-- reset the panic fault on qd
select gp_inject_fault('checkpoint',
       'reset', dbid) from gp_segment_configuration where role = 'p' and content = -1;
 gp_inject_fault 
-----------------
 Success:
(1 row)

-- reset the panic fault on qe
select gp_inject_fault('checkpoint',
       'reset', dbid) from gp_segment_configuration where role = 'p' and content = 0;
 gp_inject_fault 
-----------------
 Success:
(1 row)

DROP EXTENSION gp_inject_fault;
